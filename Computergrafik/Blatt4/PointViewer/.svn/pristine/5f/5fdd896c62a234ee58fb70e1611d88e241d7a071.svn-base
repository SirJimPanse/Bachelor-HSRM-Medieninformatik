'''
Created on 03.05.2013

@author: tland001
'''

from Tkinter import *
from Canvas import *
import sys
import random

WIDTH = 400  # width of canvas
HEIGHT = 400  # height of canvas

HPSIZE = 1  # double of point size (must be integer)
COLOR = "#0000FF"  # blue

NOPOINTS = 1000

pointList = []  # list of points (used by Canvas.delete(...))


def readfle(string):
    fle = file(string).read().split()
    count = 0
    akt = []
    for i in fle[::3]:
        akt.append([float(i), float(fle[count + 1]), float(fle[count + 2])])
        count += 3
    return akt


def createBoundingBox(pointList):
    minX = min([x[0] for x in pointList])
    maxX = max([x[0] for x in pointList])
    minY = min([x[1] for x in pointList])
    maxY = max([x[1] for x in pointList])
    minZ = min([x[2] for x in pointList])
    maxZ = max([x[2] for x in pointList])
    return [[minX, maxX], [minY, maxY], [minZ, maxZ]]


def translate(BoundingBox, pointList):
    midX = BoundingBox[0][0] + (BoundingBox[0][1] - BoundingBox[0][0]) / 2.
    midY = BoundingBox[1][0] + (BoundingBox[1][1] - BoundingBox[1][0]) / 2.
    midZ = BoundingBox[2][0] + (BoundingBox[2][1] - BoundingBox[2][0]) / 2.
    for i in pointList:
        i[0], i[1] = i[0] - midX, \
               i[1] - midY
    return pointList


def scale(boundingBox, pointCloud):
    if boundingBox[0][1] > boundingBox[1][1]:
        for i in pointCloud:
            i[0] = i[0] / boundingBox[0][1]
            i[1] = i[1] / boundingBox[0][1]
    else:
        for i in pointCloud:
            i[0] = i[0] / boundingBox[1][1]
            i[1] = i[1] / boundingBox[1][1]
    return pointCloud


def transform(pointCloud):
    for i in pointCloud:
        i[0] = WIDTH - ((i[0] * (WIDTH / 2)) + WIDTH / 2)
        i[1] = HEIGHT - ((i[1] * (HEIGHT / 2)) + HEIGHT / 2)
    return pointCloud


def quit(root=None):
    """ quit programm """
    if root == None:
        sys.exit(0)
    root._root().quit()
    root._root().destroy()


def draw():
    """ draw points """
    print "pointcloud", pointCloud[:2]
    boundingBox = createBoundingBox(pointCloud)
    print "bounding: ", boundingBox
    translatedObject = translate(boundingBox, pointCloud)
    print "translated", translatedObject[:2]
    scaledObject = scale(boundingBox, translatedObject)
    print "scale: ", scaledObject[:2]
    transformedObject = transform(scaledObject)
    print "transformed: ", transformedObject[:2]
    for i in transformedObject:
        x, y = 400 - i[0], i[1]
        p = can.create_oval(x - HPSIZE, y - HPSIZE, x + HPSIZE, y + HPSIZE,
                            fill=COLOR, outline=COLOR)
        pointList.insert(0, p)


def rotYp():
    """ rotate counterclockwise around y axis """
    global NOPOINTS
    NOPOINTS += 100
    print "In rotYp: ", NOPOINTS
    can.delete(*pointList)
    draw()


def rotYn():
    """ rotate clockwise around y axis """
    global NOPOINTS
    NOPOINTS -= 100
    print "In rotYn: ", NOPOINTS
    can.delete(*pointList)
    draw()


if __name__ == "__main__":
    #check parameters
    """
    if len(sys.argv) != 1:
       print "pointViewerTemplate.py"
       sys.exit(-1)
    """
    # create main window
    mw = Tk()
    pointCloud = readfle("bunny.obj")
    # create and position canvas and buttons
    cFr = Frame(mw, width=WIDTH, height=HEIGHT, relief="sunken", bd=1)
    cFr.pack(side="top")
    can = Canvas(cFr, width=WIDTH, height=HEIGHT)
    can.pack()
    bFr = Frame(mw)
    bFr.pack(side="left")
    bRotYn = Button(bFr, text="<-", command=rotYn)
    bRotYn.pack(side="left")
    bRotYp = Button(bFr, text="->", command=rotYp)
    bRotYp.pack(side="left")
    eFr = Frame(mw)
    eFr.pack(side="right")
    bExit = Button(eFr, text="Quit", command=(lambda root=mw: quit(root)))
    bExit.pack()

    # draw points
    draw()

    # start
    mw.mainloop()
